@page "/mychat"
@layout EmptyLayout

@using Microsoft.AspNetCore.SignalR.Client
@using OpenAI;
@using OpenAI.Chat;
@using Newtonsoft.Json;
@using System.Text;
@using AIV4.Shared;
@using Microsoft.Fast.Components.FluentUI;


@* https://stackoverflow.com/questions/57814637/how-do-i-access-env-isdevelopment-from-a-blazor-page *@
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using System.Diagnostics
@inject IWebAssemblyHostEnvironment Env
@inject IJSRuntime JSRuntime   
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>@appName</PageTitle>

<div class="container-fluid">
    <div class="mychatdialog">
        <div class="dialog-title">
            <h2>@appName</h2>
        </div>
        <ConversationDisplay 
            ConversationHistory="@conversationHistory"
            ConvSelectedCallback="ConversationSelectedCallback" />

        <div class="textMessage">
            <textarea rows="5" @bind="userPrompt"></textarea>
        </div>
        @if (!IsConnected)
        {
            <button class="btn btn-warning" @onclick="Connect">Reconnect</button>
        }
        <div class="container">
            <div class="row">
                <div class="col-3">
                    <div>
                        <div>
                            <FluentRadioGroup Name="strings" @bind-Value=modelName Label="Select a model">
                                @foreach (var model in aiModels)
                                {
                                    <FluentRadio Value=@model>@model</FluentRadio>
                                }    
                            </FluentRadioGroup>
                        </div>
                        <div>
                            <a href="https://openai.com/api/pricing/" target="_blank">OpenAI API Pricing</a>
                        </div>
                    </div>
                </div>
                <div class="col-3">
                    @if (Env.IsDevelopment())
                    {
                    <label for="pwd">No need to enter OpenAI API key:</label>
                    <input type="password" maxlength="60" @bind-value=passphrase style="width:100%" />
                        
                    }else{
                        <label for="pwd">Enter your OpenAI API Key:</label>
                        <input type="password" maxlength="60" @bind-value=passphrase style="width:100%" />
                    }
                </div>
                <div class="col-3">
                    <div>
                        <button id="btnAsk" class="btn btn-success" @onclick="sendPrompt">Ask @modelName</button>
                    </div>
                </div>
                <div class="col-3">
                    <div>
                        <p>Tokens In:@tokensIn Out:@tokensOut</p>
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <div class="col">
            <p class=" fw-semibold"> by Bill Collis</p>
        </div>
    </div>
</div>





@code {

    private string appName = "MyChat";
    private List<string> aiModels = new List<string>();

    private string modelName = "gpt-4o-mini";

    private HubConnection? textChatHubConnection;
    private bool IsConnected => textChatHubConnection?.State == HubConnectionState.Connected;
    private string user = "";
    //private string userPrompt = "For 3 to 8 give the name of each polygon with that number of sides";
    private string userPrompt = "write a python function to generate a random 2 digit number and then multiply it by 4";
    //private string userPrompt = "write html, css and javascript to implement a one page app with a timer ";

    //capturing and displaying conversations
    private List<ConversationContent> conversationHistory = new List<ConversationContent>();

    //the conversations selected to be part of the conversation with GPT
    //only selected convs will be sent to the hub
    private List<int> ConversationSelectedCallback = new List<int>();

    private string systemPrompt = "";
    private List<ChatMessage> chatMessages = new List<ChatMessage>();
    //ChatMessages can be UserChatmessage, SystemChatMessage, AssistentChatMessage

    private string passphrase = "";

    private string statsSubstring = "Data...Token";
    private int tokensIn = 0;
    private int tokensOut = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("Prism.highlightAll");
            //await JSRuntime.InvokeVoidAsync("hljs.highlightAll");
        }
        catch (Exception exc)
        {
            var e = exc;//this exception is caught when the application loads as the JS is still loading
        }
    }

    /// <summary>
    /// get a text prompt from the UI
    /// 
    /// Send a text prompt from the UI
    /// </summary>
    /// <returns></returns>
    private async Task sendPrompt()
    {
        //if its not connected
        if (!IsConnected)
        {
            await Connect();
        }

        //make sure the selected conversations are sent in sorted order to preserve communication flow with the API
        ConversationSelectedCallback.Sort();

        //create the list to send to the hub
        List<ConversationContent> conversationsToSend = new List<ConversationContent>();

        //add System Message to Conversation
        var conv1 = new ConversationContent(Role.System, ContentType.Text, systemPrompt);
        conv1.PassPhrase = passphrase;
        conversationsToSend.Add(conv1);

        //add all the selected items to the conversation to send to OpenAI
        foreach (var conv in ConversationSelectedCallback)
        {
            conversationsToSend.Add(conversationHistory[conv]);
        }


        //add the latest prompt
        var prompt = new ConversationContent(userPrompt);
        conversationHistory.Add(prompt);//this will add to conversation display
        conversationsToSend.Add(prompt); //and make sure it is sent

        var json = JsonConvert.SerializeObject(conversationsToSend);

        //send text request to the hub - 
        await textChatHubConnection.SendAsync("SendToBackEndHub", json, modelName);

    }



    /// <summary>
    /// what happens initially when the razor is loaded
    /// connect to the hub
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            AIModelsModel? model = await Http.GetFromJsonAsync<AIModelsModel>("aimodels");// read in models from controller
            aiModels = model!.aimodels;
        }
        catch (Exception e)
        {
            Debug.WriteLine(e);
        }
       await Connect();
    }

    /// <summary>
    /// Connect to the hub on the server
    /// open a channel called 'MyChat'
    /// messages back from the server arrive here in the .On<string>() event
    /// </summary>
    /// <returns></returns>
    private async Task Connect()
    {
        try
        {
            textChatHubConnection = new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri($"/chatgpthub?user={user}"))
                .Build();

            //the 'channel' for communication with the hub - all respionses come here
            textChatHubConnection.On<string>("textChat", (returnText) =>
            { 
                if (getStats(returnText)) {
                    StateHasChanged();
                    return;//dont add stats to conv history
                }
                addTextToConvHistory(returnText);
            });

            await textChatHubConnection.StartAsync();
        }
        catch(Exception exc)
        {
            var e = exc;
        }
    }





    /// <summary>
    /// get the token stats for this stream,
    /// add to totals
    /// </summary>
    /// <param name="text"></param>
    /// <returns></returns>
    private bool getStats(string text)
    {
        //get stats - note specific formatting of the string in ChatGPTHub, starts with  "Data...Token Usage"
        int indx = text.IndexOf(statsSubstring);
        try
        {
            if (indx > -1)
            {
                string stats = text.Replace("\n\n\nData...Token Usage In:", "");

                int spaceIndex = stats.IndexOf(" ");
                string tokensString = stats.Substring(0, spaceIndex);
                tokensIn += int.Parse(tokensString);
                stats = stats.Replace(tokensString, "").Trim();

                stats = stats.Replace("Out:", "");
                spaceIndex = stats.IndexOf(" ");
                tokensString = stats.Substring(0, spaceIndex);
                tokensOut += int.Parse(tokensString);
                return true;
            }
        }
        catch (Exception e)
        {
            var exc = e;
        }
        return false;
    }


    /// <summary>
    /// Add incoming text to the conversation
    /// Parse and program code to display it correctly using prism.js
    /// </summary>
    /// <param name="text"></param>
    private void addTextToConvHistory(string text)
    {

        //add the text to the last item in convHistory - via binding this is shown on the last conversation bubble
        if (conversationHistory.Count > 0)
        {
            // Access the last convContent using index (Count - 1), if it is not assistant create assistant, text type
            if (conversationHistory[conversationHistory.Count - 1].Role != Role.Assistant)
            {
                var conversationContent = new ConversationContent(Role.Assistant, ContentType.Text);
                conversationContent.AppendTextResponse(text);
                conversationHistory.Add(conversationContent);
            }
            else //add to last conv
            {
                conversationHistory[conversationHistory.Count - 1].AppendTextResponse(text);
            }

        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (textChatHubConnection is not null)
        {
            await textChatHubConnection.DisposeAsync();
        }
    }


}
