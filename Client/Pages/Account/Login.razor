@page "/login"

@using AIV4.Client.Models.Entities
@using System.Security.Claims
@* @using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
 *@
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model = "@Model" OnValidSubmit="Authenticate" FormName="LoginForm">
            <DataAnnotationsValidator/>
            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" style="max-height:5rem;"/>
                <h3>Login</h3>
            </div>
            <div class="mb-3">
                <label>User Name</label>
                <InputText @bind-Value="@Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-3">
                <label>Password</label>
                <InputText @bind-Value="@Model.Password" class="form-control" typeof="password" placeholder="Password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@errorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
</div>


@code {
    [CascadingParameter]
    // public HttpContext? HttpContext{ get; set; }

    // [SupplyParameterFromForm]
    public LoginViewModel Model { get; set; } = new();
    private string? errorMessage;

    private async Task Authenticate()
    {
        // var userAccount = appDbContext.UserAccounts.Where(x => x.Username == Model.Username).FirstOrDefault();
        // if (userAccount is null || userAccount.Password!= Model.Password)
        // {
        //     errorMessage = "Invalid User name or Password";
        //     return;
        // }
        // var claims = new List<Claim>
        // {
        //     new Claim(ClaimTypes.Name, Model.Username),
        //     new Claim(ClaimTypes.Role, userAccount.Role)
        // };
        // var identity = new ClaimsIdenitity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        // var principal = new ClaimsPrincipal(identity);
        // await HttpContext.SignInAsync(principal);
    }

}
