@using Microsoft.AspNetCore.SignalR.Client
@using OpenAI;
@using OpenAI.Chat;
@using Newtonsoft.Json;
@using System.Text;
@using AIV4.Shared;
@using Microsoft.Fast.Components.FluentUI;

@inject NavigationManager NavManager
@inject IJSRuntime JSRuntime

@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inject IWebAssemblyHostEnvironment Env

<script type="text/javascript">
    function scrollToBottom(textarea) {
        textarea.scrollTop = textarea.scrollHeight;
    }
</script>

@if (Show)
{
    <div class="dialog-container">
        <div class="dialog">
            <div class="dialog-title">
                <h2>@CD1.Code Elaborations (@ModelName)</h2>
                @CD1.Description
            </div>
            <ConversationDisplay ConversationHistory="@conversationHistory" />

            <div class="dialog-body">
                @if (@CD1.Elaborations != null)
                {
                    <p class="my-0 ms-2">Choose an elaboration below (and edit if required) then click the Generate button to send to OpenAI model:@ModelName</p>
                    <p class="my-0 ms-4"><strong>Query criteria</strong></p>
                    <textarea rows="2" class="form-control form-control-sm mb-2 ms-2" @bind="starterPrompt"></textarea>
                    <p class="my-0 ms-4"><strong>Elaboration(s)</strong></p>
                    @for(int i=0;i<CD1.Elaborations.Count;i++)
                    {
                        int idx = i;//to pass index to SendPrompt, cannot use i, must use a copy of it 
                        <div class="my-0 py-0">
                            <textarea rows="2" class="form-control form-control-sm py-0 my-0 ms-2">@CD1.Elaborations[idx]</textarea>
                            <button class="btn btn-info btn-sm py-0 ms-1" @onclick="()=>sendPrompt(idx)">Generate</button>
                        </div>
                    }
                }
            </div>
            <div class="container">
                <div class="row">
                    <div class="col-4">
                        <button class="btn btn-secondary" @onclick="OnClose">Close</button>
                    </div>
                    <div class="col-4">
                        @if (Env.IsDevelopment())
                        {
                            <label for="pwd">Don't enter passphrase:</label>
                            <input type="password" maxlength="40" @bind-value=passphrase style="width:100%" />
                        }
                        else
                        {
                            <label for="pwd">Enter your passphrase:</label>
                            <input type="password" maxlength="40" @bind-value=passphrase style="width:100%" />
                        }
                    </div>
                    <div class="col-4">

                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {

    ElementReference ScrollAreaRef;

    public string userPrompt = "";
    private static HttpClient Http = new HttpClient();
    public bool IsConnected => textChatHubConnection?.State == HubConnectionState.Connected;
    private string user = "";
    public string responses = "";

    //my own class for capturing conversations
    private List<ConversationContent> conversationHistory = new List<ConversationContent>();


    private string AppName = "Curry";

    private string starterPrompt = @"Design a unit of work with  3 x 40 min lessons for students, then design a rubric with 4 levels for the unit. 
The first lesson must include unpacking the concept description and providing a set of success criteria for the lessons.";

    private HubConnection? textChatHubConnection;
    [Parameter] public ContentDescription CD1 { get; set; }
    [Parameter] public string ModelName { get; set; }

    [Parameter]
    public bool Show
    {
        get;
        set;
    }
    //callback to parent that the event has happend
    //Onclick above is bound to this parameter OnClose, which in the parent 
    [Parameter]
    public EventCallback OnClose
    {
        get;
        set;
    }

    private string passphrase = "";

    /// <summary>
    /// what happens initially when the razor is loaded
    /// connect to the hub
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await Connect();  //try to connect to the hub
            Console.WriteLine(" ************* Connected to Hub *************");
        }
        catch (Exception exc)
        {
            var e = exc;
            Console.WriteLine(" ************* Cannot connect to Hub *************");
        }
    }


    /// <summary>
    /// Connect to the hub on the server
    /// open a channel called 'MyChat'
    /// messages back from the server arrive here in the .On<string>() event
    /// </summary>
    /// <returns></returns>
    private async Task Connect()
    {
        try
        {
            textChatHubConnection = new HubConnectionBuilder()
                .WithUrl(NavManager.ToAbsoluteUri($"/chatgpthub?user={user}"))
                .Build();

            //the 'channel' for communication
            textChatHubConnection.On<string>("textChat", (returnText) =>
            {
                addTextToConvHistory(returnText);
            });

            await textChatHubConnection.StartAsync();
        }
        catch (Exception exc)
        {
            var e = exc;
        }
    }


    /// <summary>
    /// Display the response in the Window
    /// Format program code using CodeIt
    /// </summary>
    /// <param name="text"></param>
    private void addTextToConvHistory(string text)
    {
        //Console.WriteLine(text);
        text = CodeParser.Parse(text);
        //Console.WriteLine(text);

        //add the text to the last item in convHistory - via binding this is shown on the last conversation bubble
        if (conversationHistory.Count > 0)
        {
            // Access the last convContent using index (Count - 1), if it is not assistant create assistant, text type
            if (conversationHistory[conversationHistory.Count - 1].Role != Role.Assistant)
            {
                var conversationContent = new ConversationContent(Role.Assistant, ContentType.Text);
                conversationContent.AppendTextResponse(text);
                conversationHistory.Add(conversationContent);
            }
            else //add to last conv
            {
                conversationHistory[conversationHistory.Count - 1].AppendTextResponse(text);
            }
        }
        StateHasChanged();
    }

    /// <summary>
    /// Send a single text prompt
    /// </summary>
    /// <returns></returns>
    private async Task sendPrompt(int selectedElabIndex)
    {
        //if its not connected
        if (!IsConnected)
        {
            return;
        }

        string editableElab = CD1.Elaborations.ElementAt(selectedElabIndex);

        userPrompt = $@"You are a teacher who is working with {CD1.Age} year old students on the
 Content Description '{CD1.Description}' from Version 9 of the Australian Curriculum.
Use this '{editableElab}'. {starterPrompt}.
";


        var thisContent = new ConversationContent(userPrompt);
        if (Env.IsDevelopment()) passphrase = "locally";
        thisContent.PassPhrase = passphrase;
        conversationHistory.Add(thisContent);

        //at this stage dont send history just send a new convHistory object with only 1 conv
        List<ConversationContent> temp = new List<ConversationContent>();
        temp.Add(thisContent);

        var json = JsonConvert.SerializeObject(temp);

        //tried sending serialised and then deserialising UserChatMessage and list<UserChatMessage> but neither deserialise
        //UserChatMessage userChatMessage = new UserChatMessage(userPrompt);
        //var chatMessages = new List<UserChatMessage>();
        //chatMessages.Add(userChatMessage);
        //var json = JsonConvert.SerializeObject(userChatMessage);//works if serialized
        //var USM = JsonConvert.DeserializeObject<UserChatMessage>(json);

        //send single text request to the hub -
        await textChatHubConnection.SendAsync("SendToOpenAIAPI", json, ModelName);

    }



//     private async Task SendPrompt(int selectedElabIndex)
//     {
//         //int selectedElabIndex = int.Parse(elabIndexStr);
//         string editableElab = CD1.Elaborations.ElementAt(selectedElabIndex);

//         message = $@"You are a teacher who is working with {CD1.Age} year old students on the
//  Content Description '{CD1.Description}' from Version 9 of the Australian Curriculum.
// Use this '{editableElab}'. {starterPrompt}.
// ";

//         messageHistory.Add(userPrompt);
//         messageHistory.Add(""); //the response - actually move this below. add if odd/even?
//         if (textChatHubConnection == null)
//         {
//             await Connect();
//         }

//         if (IsConnected)
//         {
//             // completionRequest = new CompletionRequest(
//             //     message,
//             //     OpenaiModel,
//             //     2000
//             // );
//             // // Call the SignalR hub method to request OpenAI completion
//             // await hubConnection.SendAsync("SendRequestToOpenAi", completionRequest);
//         }
//         else
//         {
//             //some message about not being connected to the server?
//         }
//         StateHasChanged();
//     }

}
